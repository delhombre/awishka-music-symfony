security:
  # enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  encoders:
    App\Entity\User:
      algorithm: auto
  providers:
    # users_in_memory: { memory: null }
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
    modify_user_provider:
      entity:
        class: App\Entity\User
        property: username
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    login:
      provider: app_user_provider
      pattern: ^/api/login
      stateless: true
      anonymous: true
      json_login:
        check_path: /api/login_check
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    users:
      provider: modify_user_provider
      pattern: ^/apip/users
      methods: [PUT, PATCH, DELETE]
      stateless: true
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator

    main:
      anonymous: lazy
      # lazy: true
      provider: app_user_provider


      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication
      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/awishka/music/secret/, roles: ROLE_SUPER_ADMIN }
    - {
        path: ^/apip/users,
        roles: [IS_AUTHENTICATED_FULLY],
        methods: [PUT, PATCH, DELETE],
      }
